generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  username        String?
  displayUsername String?

  role          String?
  banned        Boolean?        @default(false)
  banReason     String?
  banExpires    DateTime?
  student       Student?
  teacher       Teacher?
  SchoolFinance SchoolFinance[]

  @@unique([email])
  @@unique([username])
}

model SchoolBalance {
  id          Int      @id @default(autoincrement())
  amount      Int // Saldo saat ini dalam satuan rupiah
  updatedAt   DateTime @updatedAt
  description String?
}

model SchoolFinance {
  id          String      @id @default(cuid())
  type        FinanceType // PEMASUKAN atau PENGELUARAN
  category    String // Contoh: SPP, Donasi, Gaji, Operasional, dll.
  amount      Int // Jumlah uang dalam satuan rupiah
  description String? // Keterangan tambahan
  date        DateTime // Tanggal transaksi
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Jika ingin mengaitkan transaksi dengan user tertentu (opsional)
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Student {
  id           String        @id @default(cuid())
  nama         String
  nisn         String        @unique
  tanggalLahir DateTime
  jenisKelamin Gender
  alamat       String
  noTelepon    String
  status       StudentStatus @default(AKTIF)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  kelasId String?
  kelas   Class?  @relation(fields: [kelasId], references: [id])

  ClassHistory ClassHistory[]
}

model Teacher {
  id           String        @id @default(cuid())
  nip          String        @unique
  nama         String
  jenisKelamin Gender
  tanggalLahir DateTime
  alamat       String?
  email        String?       @unique
  noTelepon    String?
  status       TeacherStatus @default(AKTIF)
  tanggalMasuk DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  waliKelas Class?
}

model Class {
  id        String       @id @default(cuid())
  namaKelas String
  tingkat   StudentGrade
  ruang     String?
  status    ClassStatus  @default(AKTIF)
  isLast    Boolean      @default(false)

  waliKelasId String?  @unique
  waliKelas   Teacher? @relation(fields: [waliKelasId], references: [id])

  students     Student[]
  ClassHistory ClassHistory[]
}

model ClassHistory {
  id        String   @id @default(cuid())
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  studentId String
  student   Student  @relation(fields: [studentId], references: [id])
  createdAt DateTime @default(now())

  @@unique([classId, studentId])
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum StudentStatus {
  AKTIF
  ALUMNI
  KELUAR
}

enum TeacherStatus {
  AKTIF
  CUTI
  KELUAR
  PENSIUN
}

enum StudentGrade {
  SD
  SMP
  SMK
}

enum ClassStatus {
  AKTIF
  NON_AKTIF
}

enum FinanceType {
  PEMASUKAN
  PENGELUARAN
}
